#!/bin/bash

# Script to reset passwords



print_help() {

dialog --title 'Help' --msgbox '
Script to reset users passwords
usage: password_reset  -e (email_address) -p (new_password)' 10 100
}


while getopts ":e:p:?" option;
do
	case $option in 
#	t) target_environment=$OPTARG;;
	e) email_address=$OPTARG;;
	p) new_password=$OPTARG;;
	\?) print_help; exit 1;;
	esac
done
  
rm -rf /tmp/target_environment
rm -rf /tmp/menu_choice



# Generate Password Request

if [ -z "$email_address" ] || [ -z "$new_password" ]; then

	dialog --title 'Generate Password Reset request' --msgbox '
		not all options supplied' 10 50
	print_help
	exit
else
	dialog --title 'Generate Password Reset request' --msgbox '
		All options supplied, will continue' 10 50

fi


dialog --title "Generate Password Reset request" --menu "Choose an environment:" 0 0 2 "UKPROD" 1 "NAPROD" 2 2>/tmp/menu_choice

if [ "$?" = "0" ]
then
	return=$(cat /tmp/menu_choice)

	case $return in 
	UKPROD)
		dialog --msgbox "You choose: UKPROD" 10 50
		echo ukprod > /tmp/target_environment
		;;

	NAPROD)	
		dialog --msgbox "You choose: NAPROD" 10 50
		echo naprod > /tmp/target_environment
		;;
	esac 
elif [ "$?" = "1" ]
then
	exit 0

fi

target_environment=$(cat /tmp/target_environment)


if [ "$target_environment" == "ukprod" ] || [ "$target_environment" == "UKPROD" ]; then

	dialog --title 'Generating Password Reset Request - UKPROD' --infobox 'Requesting Password token' 10 50  ; sleep 2
	call=$(echo "-target="$target_environment "-method=POST" "-call=/auth/passwordReset -body={\"passwordResets\":[{\"email\":\"$email_address\"}]}")
	WD $call 2>&1 /tmp/UKpassword-reset.log

else

	dialog --title 'Generating Password Reset Request - NAPROD' --infobox 'Requesting Password token' 10 50 ; sleep 2
	call=$(echo "-target="$target_environment "-method=POST" "-call=/auth/passwordReset -body={\"passwordResets\":[{\"email\":\"$email_address\"}]}")
	WD $call > /tmp/NApassword-reset.log

fi


# Get password reset token

if [ "$target_environment" == "ukprod" ] || [ "$target_environment" == "UKPROD" ]; then

	dialog --title 'Retrieving password reset token' --infobox 'Getting Token.....' 10 50 ; sleep 2
	token_search=$( ssh HUK-ops "mysql --login-path=tsd users  --execute 'SELECT passwordResetToken FROM users WHERE email=\"$email_address\";'")
	token=$(echo $token_search | awk -F ' ' '{print $2}')  
	
	if [ -z "$token" ]; then
		dialog --title 'Unable to get Token' --infobox 'unable to get token from database please investigate' 10 50 ; sleep 2
		
	fi
else

dialog --title 'Retrieving password reset token' --infobox 'Getting Token.....' 10 50 ; sleep 2
        token_search=$( ssh  "mysql --login-path=tsd users  --execute 'SELECT passwordResetToken FROM users WHERE email=\"$email_address\";'")
        token=$(echo $token_search | awk -F ' ' '{print $2}')
	
	if [ -z "$token" ]; then
		dialog --title 'Unable to get Token from database' --infobox 'Unable to get token from database please investigate'; sleep 2
	fi

fi
# Set new password

dialog --title 'Setting New Password' --infobox 'Setting password....' 10 50 ; sleep 2
call=$( echo "-target="$target_environment "-method=PUT" "-call=/auth/passwordReset/"$token" -body={\"passwordResets\":[{\"password\":\"$new_password\"}]}")
WD $call | tee -a /tmp/password-reset.log



